Timer unit: 1e-06 s

Total time: 0.308644 s
File: /home/lucam/devtools_scicomp_project_2025/src/pyclassify/classifier.py
Function: _get_k_nearest_neighbours at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                               @profile
    16                                               def _get_k_nearest_neighbours(self,X,y,x) :
    17       281         27.1      0.1      0.0          distances = []
    18     19951       1588.3      0.1      0.5          for i in range(len(X)) :
    19     19670     304201.1     15.5     98.6              distances.append(self.distance(X[i],x))
    20       281        442.4      1.6      0.1          d_y = list(zip(distances,y))
    21       281       1263.5      4.5      0.4          d_y.sort()
    22       281       1032.6      3.7      0.3          y_sorted = [item[1] for item in d_y]
    23       281         88.6      0.3      0.0          return y_sorted[:self.k]

Total time: 0.316192 s
File: /home/lucam/devtools_scicomp_project_2025/src/pyclassify/classifier.py
Function: __call__ at line 25

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    25                                               @profile
    26                                               def __call__(self, data, new_points):
    27         1          0.5      0.5      0.0          X, y = data
    28         1          0.2      0.2      0.0          retval = []
    29         1          0.5      0.5      0.0          if self.backend == "plain" :
    30         1         24.6     24.6      0.0              print("Using plain")
    31         1          1.9      1.9      0.0              self.distance = utils.distance
    32                                                   elif self.backend == "numpy" :
    33                                                       print("Using numpy")
    34                                                       self.distance = utils.distance_numpy
    35                                                       X, y, new_points = np.array(X),  np.array(y), np.array(new_points)
    36                                                   elif self.backend == "numba" :
    37                                                       print("Using numba")
    38                                                       self.distance = utils_compiled.distance_numba
    39                                                       X, y, new_points = np.array(X,dtype=np.float64),  np.array(y), np.array(new_points, np.dtype(np.float64))
    40       282         35.6      0.1      0.0          for new_point in new_points :
    41       281     314136.9   1117.9     99.4              neighbours_labels = self._get_k_nearest_neighbours(X,y,new_point)
    42       281       1991.2      7.1      0.6              retval.append(utils.majority_vote(neighbours_labels))
    43         1          0.1      0.1      0.0          return retval

Total time: 0.146384 s
File: /home/lucam/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: distance at line 20

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                           @profile
    21                                           def distance(point1, point2) :
    22     19670       1519.4      0.1      1.0      retval = 0.0
    23    688450      48259.5      0.1     33.0      for i in range(len(point1)) :
    24    668780      95140.0      0.1     65.0          retval += (point1[i] - point2[i]) * (point1[i] - point2[i])
    25     19670       1465.6      0.1      1.0      return retval

Total time: 0 s
File: /home/lucam/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: distance_numpy at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def distance_numpy(point1_np,point2_np) :
    29                                               point2_1_np = point2_np - point1_np
    30                                               return np.dot(point2_1_np,point2_1_np)

Total time: 0.000869357 s
File: /home/lucam/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: majority_vote at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           @profile
    33                                           def majority_vote(neighbours) :
    34       281         31.1      0.1      3.6      vote_count = {}
    35      1686        158.1      0.1     18.2      for vote in neighbours :
    36      1405        146.9      0.1     16.9          if vote in vote_count :
    37       987        138.4      0.1     15.9              vote_count[vote] += 1
    38                                                   else :
    39       418         60.8      0.1      7.0              vote_count[vote] = 1
    40       281         26.6      0.1      3.1      majority = None
    41       281         23.9      0.1      2.8      majority_count = 0
    42       699        149.2      0.2     17.2      for vote, count in vote_count.items() :
    43       418         53.0      0.1      6.1          if count > majority_count :
    44       318         27.8      0.1      3.2              majority_count = count
    45       318         29.2      0.1      3.4              majority = vote
    46       281         24.3      0.1      2.8      return majority

